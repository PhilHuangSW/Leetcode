// #################### COUNT AND SAY ####################

// The **count-and-say** sequence is a sequence of digit strings defined by the recursive formula:

// - countAndSay(1) = "1"
// - countAndSay(n) is the way you would "say" the digit string from countAndSay(n-1), which is then converted into a different digit string.

// To determine how you "say" a digit string, split it into the **minimal** number of groups so that each group is a contiguous section all of the **same character**. Then for each group, say the number of characters, then say the character. To convert the saying into a digit string, replace the counts with a number and concatenate every saying.

// For example, the saying and conversion for digit string "3322251":

// Given a positive integer n, return the nth term of the **count-and-say sequence.**

// **Example 1:**
// ```
// Input: n = 1
// Output: "1"
// Explanation: This is the base case.
// ```

// **Example 2:**
// ```
// Input: n = 4
// Output: "1211"
// Explanation:
// countAndSay(1) = "1"
// countAndSay(2) = say "1" = one 1 = "11"
// countAndSay(3) = say "11" = two 1's = "21"
// countAndSay(4) = say "21" = one 2 + one 1 = "12" + "11" = "1211"
// ``` 

// **Constraints:**
// - 1 <= n <= 30

// #################### SOLUTION ####################
/*
 * @param {number} n
 * @return {string}
 */
var countAndSay = function(n) {
  var dp = []
  dp[0] = "1"
  dp[1] = "11"
  for (let i = 2; i < n; i++) {
    dp[i] = csHelper(dp[i-1])
  }
  return dp[n-1]
};

function csHelper(dp) {
  var ans = ""
  var idx = 1
  var current = dp[0]
  var count = 1

  while (idx != dp.length) {
    if (dp[idx] != current) {
      ans += count.toString()
      ans += current
      current = dp[idx]
      count = 1
      idx += 1
    } else {
      count += 1
      idx += 1
    }
  }

  if (idx == dp.length) {
    ans += count.toString()
    ans += current
  }
  
  return ans
};

const n1 = 1
const n2 = 4
const n3 = 8
const n4 = 10
const n5 = 13
const n6 = 29

describe("Count and Say", function() {
  it("returns a string of integers for the count and say sequence", function() {
    expect(countAndSay(n1)).toEqual("1")
  })
  it("returns a string of integers for the count and say sequence", function() {
    expect(countAndSay(n2)).toEqual("1211")
  })
  it("returns a string of integers for the count and say sequence", function() {
    expect(countAndSay(n3)).toEqual("1113213211")
  })
  it("returns a string of integers for the count and say sequence", function() {
    expect(countAndSay(n4)).toEqual("13211311123113112211")
  })
  it("returns a string of integers for the count and say sequence", function() {
    expect(countAndSay(n5)).toEqual("1321132132111213122112311311222113111221131221")
  })
  it("returns a string of integers for the count and say sequence", function() {
    expect(countAndSay(n6)).toEqual
  })
})